-- =====================================================
-- Phase 2: Specialized AI Engineering Agents
-- Created: 2025-01-26
-- Purpose: Discipline-specific AI agents with workflow orchestration
-- =====================================================

-- =====================================================
-- Table 1: Agent Definitions
-- Stores configuration for each specialized agent
-- =====================================================
CREATE TABLE IF NOT EXISTS public.ai_agents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  discipline TEXT NOT NULL UNIQUE, -- civil, electrical, mechanical, etc.
  display_name TEXT NOT NULL,
  description TEXT NOT NULL,
  icon_name TEXT NOT NULL, -- Lucide icon name
  color_scheme TEXT NOT NULL, -- bg-blue-500, bg-green-500, etc.
  
  -- Capabilities & Workflows
  capabilities JSONB NOT NULL DEFAULT '[]'::jsonb, -- List of agent capabilities
  workflows JSONB NOT NULL DEFAULT '[]'::jsonb, -- Workflow definitions
  decision_checkpoints JSONB NOT NULL DEFAULT '[]'::jsonb, -- Decision points requiring human approval
  
  -- Prompts & Configuration
  system_prompt TEXT NOT NULL, -- Base system prompt for this agent
  prompt_templates JSONB NOT NULL DEFAULT '{}'::jsonb, -- Reusable prompt templates
  tool_stack JSONB NOT NULL DEFAULT '[]'::jsonb, -- Available tools/integrations
  
  -- Dataset & Training
  training_requirements JSONB NOT NULL DEFAULT '{}'::jsonb, -- Required training data
  qa_safeguards JSONB NOT NULL DEFAULT '[]'::jsonb, -- Quality assurance rules
  validation_rules JSONB NOT NULL DEFAULT '[]'::jsonb, -- Output validation
  
  -- Integration
  integration_hooks JSONB NOT NULL DEFAULT '{}'::jsonb, -- How agent integrates with platform
  output_templates JSONB NOT NULL DEFAULT '{}'::jsonb, -- Deliverable templates
  
  -- Metadata
  is_active BOOLEAN DEFAULT true,
  requires_certification BOOLEAN DEFAULT false, -- Requires SCE certification
  min_experience_years INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Create index for quick lookup
CREATE INDEX idx_ai_agents_discipline ON public.ai_agents(discipline);
CREATE INDEX idx_ai_agents_active ON public.ai_agents(is_active);


-- =====================================================
-- Table 2: Agent Sessions
-- Tracks when users engage specific agents
-- =====================================================
CREATE TABLE IF NOT EXISTS public.ai_agent_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  agent_id UUID NOT NULL REFERENCES public.ai_agents(id) ON DELETE CASCADE,
  conversation_id UUID REFERENCES public.ai_conversations(id) ON DELETE CASCADE,
  
  -- Session context
  project_id UUID, -- Optional: Link to specific project
  job_id UUID, -- Optional: Link to specific job
  session_type TEXT NOT NULL, -- consultation, design, review, calculation, etc.
  
  -- Session state
  workflow_stage TEXT, -- Current stage in workflow
  decision_points JSONB DEFAULT '[]'::jsonb, -- Decisions made/pending
  deliverables JSONB DEFAULT '[]'::jsonb, -- Generated outputs
  
  -- Metadata
  started_at TIMESTAMPTZ DEFAULT now(),
  ended_at TIMESTAMPTZ,
  is_active BOOLEAN DEFAULT true,
  session_data JSONB DEFAULT '{}'::jsonb -- Extensible context
);

-- Indexes
CREATE INDEX idx_ai_agent_sessions_user ON public.ai_agent_sessions(user_id, started_at DESC);
CREATE INDEX idx_ai_agent_sessions_agent ON public.ai_agent_sessions(agent_id, started_at DESC);
CREATE INDEX idx_ai_agent_sessions_project ON public.ai_agent_sessions(project_id);

-- RLS Policy
CREATE POLICY "Users can manage their own agent sessions"
ON public.ai_agent_sessions FOR ALL
USING (user_id = auth.uid());


-- =====================================================
-- Table 3: Agent Deliverables
-- Stores technical outputs generated by agents
-- =====================================================
CREATE TABLE IF NOT EXISTS public.ai_agent_deliverables (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID NOT NULL REFERENCES public.ai_agent_sessions(id) ON DELETE CASCADE,
  agent_id UUID NOT NULL REFERENCES public.ai_agents(id),
  user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  
  -- Deliverable details
  deliverable_type TEXT NOT NULL, -- calculation, design, report, checklist, etc.
  title TEXT NOT NULL,
  content JSONB NOT NULL, -- Structured deliverable data
  file_url TEXT, -- Optional: Link to generated file (PDF, DWG, etc.)
  
  -- Quality & Validation
  validation_status TEXT DEFAULT 'pending', -- pending, validated, rejected
  validation_notes TEXT,
  validated_by UUID REFERENCES public.profiles(user_id),
  validated_at TIMESTAMPTZ,
  
  -- Metadata
  metadata JSONB DEFAULT '{}'::jsonb, -- Additional context
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Indexes
CREATE INDEX idx_ai_agent_deliverables_session ON public.ai_agent_deliverables(session_id);
CREATE INDEX idx_ai_agent_deliverables_user ON public.ai_agent_deliverables(user_id, created_at DESC);
CREATE INDEX idx_ai_agent_deliverables_type ON public.ai_agent_deliverables(deliverable_type);

-- RLS Policy
CREATE POLICY "Users can manage their own agent deliverables"
ON public.ai_agent_deliverables FOR ALL
USING (user_id = auth.uid());


-- =====================================================
-- Table 4: Agent Feedback & Learning
-- Captures user feedback for continuous improvement
-- =====================================================
CREATE TABLE IF NOT EXISTS public.ai_agent_feedback (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID NOT NULL REFERENCES public.ai_agent_sessions(id) ON DELETE CASCADE,
  agent_id UUID NOT NULL REFERENCES public.ai_agents(id),
  user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  
  -- Feedback details
  feedback_type TEXT NOT NULL, -- accuracy, safety, usability, performance
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  
  -- Context
  deliverable_id UUID REFERENCES public.ai_agent_deliverables(id),
  specific_issue TEXT, -- What went wrong (if applicable)
  suggested_improvement TEXT,
  
  -- Metadata
  metadata JSONB DEFAULT '{}'::jsonb,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Indexes
CREATE INDEX idx_ai_agent_feedback_agent ON public.ai_agent_feedback(agent_id, created_at DESC);
CREATE INDEX idx_ai_agent_feedback_type ON public.ai_agent_feedback(feedback_type);
CREATE INDEX idx_ai_agent_feedback_rating ON public.ai_agent_feedback(rating);

-- RLS Policy
CREATE POLICY "Users can manage their own agent feedback"
ON public.ai_agent_feedback FOR ALL
USING (user_id = auth.uid());


-- =====================================================
-- Table 5: Agent Telemetry
-- Tracks agent usage metrics and performance
-- =====================================================
CREATE TABLE IF NOT EXISTS public.ai_agent_telemetry (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID NOT NULL REFERENCES public.ai_agents(id),
  user_id UUID REFERENCES public.profiles(user_id) ON DELETE SET NULL,
  session_id UUID REFERENCES public.ai_agent_sessions(id) ON DELETE SET NULL,
  
  -- Metrics
  event_type TEXT NOT NULL, -- agent_invoked, workflow_completed, decision_made, etc.
  duration_ms INTEGER, -- Time taken
  token_count INTEGER,
  cost_usd DECIMAL(10,6),
  
  -- Quality metrics
  accuracy_score DECIMAL(5,2), -- 0.00 to 100.00
  safety_score DECIMAL(5,2),
  user_satisfaction DECIMAL(5,2),
  
  -- Context
  workflow_stage TEXT,
  deliverable_type TEXT,
  metadata JSONB DEFAULT '{}'::jsonb,
  
  -- Timestamp
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Indexes for analytics
CREATE INDEX idx_ai_agent_telemetry_agent ON public.ai_agent_telemetry(agent_id, created_at DESC);
CREATE INDEX idx_ai_agent_telemetry_event ON public.ai_agent_telemetry(event_type);
CREATE INDEX idx_ai_agent_telemetry_user ON public.ai_agent_telemetry(user_id, created_at DESC);

-- RLS Policy  
CREATE POLICY "Users can view their own agent telemetry"
ON public.ai_agent_telemetry FOR SELECT
USING (user_id = auth.uid() OR user_id IS NULL);


-- =====================================================
-- Insert Base Agent Definitions (9 Disciplines)
-- =====================================================

-- 1. Civil Engineering Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack,
  training_requirements,
  qa_safeguards
) VALUES (
  'civil',
  'Civil Engineering Assistant',
  'Specializes in structural design, site planning, foundation analysis, and infrastructure projects',
  'Building2',
  'bg-blue-600',
  '["structural_analysis", "foundation_design", "site_planning", "infrastructure_design", "road_design", "drainage_systems", "quantity_surveying"]'::jsonb,
  '["brief_interpretation", "preliminary_design", "calculations", "drawings_generation", "compliance_check", "client_review"]'::jsonb,
  'You are a specialized Civil Engineering AI assistant with expertise in Saudi Arabian construction standards (SBC, SCE regulations). You help with structural analysis, foundation design, site planning, BOQ generation, and compliance verification. Always prioritize safety, accuracy, and code compliance.',
  '["autocad_integration", "structural_analysis_software", "quantity_surveying", "code_compliance_checker", "soil_analysis"]'::jsonb,
  '{"required_datasets": ["saudi_building_code", "structural_calculations", "foundation_charts", "soil_test_reports"], "sample_size": 1000, "validation_method": "peer_review"}'::jsonb,
  '["verify_load_factors", "check_safety_margins", "validate_code_compliance", "review_calculations", "flag_unusual_values"]'::jsonb
);

-- 2. Electrical Engineering Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'electrical',
  'Electrical Engineering Assistant',
  'Specializes in power systems, lighting design, load calculations, and electrical safety',
  'Zap',
  'bg-yellow-600',
  '["power_system_design", "lighting_calculations", "load_analysis", "protection_systems", "renewable_integration", "energy_efficiency"]'::jsonb,
  '["load_calculation", "circuit_design", "panel_schedule", "single_line_diagram", "lighting_layout", "safety_review"]'::jsonb,
  'You are a specialized Electrical Engineering AI assistant with expertise in Saudi electrical codes and standards. You help with power distribution design, lighting calculations, load analysis, protection systems, and energy efficiency optimization. Always ensure safety and code compliance.',
  '["etap_integration", "dialux_lighting", "load_calculator", "fault_analysis", "energy_audit"]'::jsonb
);

-- 3. Structural Engineering Agent  
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'structural',
  'Structural Engineering Assistant',
  'Specializes in structural analysis, concrete/steel design, and seismic calculations',
  'Hammer',
  'bg-gray-700',
  '["structural_analysis", "concrete_design", "steel_design", "seismic_analysis", "foundation_design", "retaining_walls", "beam_column_design"]'::jsonb,
  '["load_analysis", "member_sizing", "reinforcement_design", "connection_design", "stability_check", "drawings"]'::jsonb,
  'You are a specialized Structural Engineering AI assistant expert in concrete and steel design per Saudi Building Code. You perform structural calculations, design reinforcement, size members, and verify structural safety. Always apply proper safety factors and code requirements.',
  '["etabs_integration", "safe_software", "concrete_calc", "steel_calc", "seismic_analysis"]'::jsonb
);

-- 4. Mechanical (HVAC) Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'hvac',
  'HVAC Engineering Assistant',
  'Specializes in HVAC design, thermal load calculations, and energy efficiency',
  'Wind',
  'bg-cyan-600',
  '["cooling_load_calc", "heating_load_calc", "duct_sizing", "equipment_selection", "energy_modeling", "ventilation_design"]'::jsonb,
  '["thermal_load_calc", "equipment_sizing", "duct_layout", "psychrometric_analysis", "energy_efficiency", "compliance"]'::jsonb,
  'You are a specialized HVAC Engineering AI assistant expert in thermal comfort and energy efficiency for Saudi climate. You perform load calculations, equipment selection, duct sizing, and energy optimization. Consider extreme heat conditions and energy codes.',
  '["hap_software", "load_calculator", "duct_sizer", "equipment_selector", "energy_modeler"]'::jsonb
);

-- 5. Survey/Geomatics Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'surveying',
  'Survey & Geomatics Assistant',
  'Specializes in land surveying, GPS data processing, and topographic mapping',
  'MapPin',
  'bg-green-600',
  '["topographic_survey", "gps_processing", "coordinate_transformation", "volume_calculations", "contour_mapping", "boundary_survey"]'::jsonb,
  '["data_collection", "processing", "quality_check", "map_generation", "report_prep"]'::jsonb,
  'You are a specialized Survey & Geomatics AI assistant expert in Saudi coordinate systems and survey standards. You process GPS data, calculate volumes, generate contours, and produce accurate survey reports. Ensure precision and proper datum references.',
  '["gps_processor", "cad_integration", "volume_calculator", "coordinate_transformer", "mapping_tools"]'::jsonb
);

-- 6. HSE (Health, Safety, Environment) Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'hse',
  'HSE Compliance Assistant',
  'Specializes in safety planning, risk assessment, and environmental compliance',
  'Shield',
  'bg-red-600',
  '["risk_assessment", "safety_planning", "incident_investigation", "permit_systems", "environmental_compliance", "safety_audits"]'::jsonb,
  '["hazard_identification", "risk_matrix", "control_measures", "safety_plan", "audit_checklist", "incident_report"]'::jsonb,
  'You are a specialized HSE AI assistant expert in Saudi safety regulations and OSHA standards. You identify hazards, assess risks, develop safety plans, and ensure environmental compliance. Safety is paramount - flag any unsafe conditions immediately.',
  '["risk_matrix", "jha_generator", "permit_system", "audit_checklist", "incident_tracker"]'::jsonb
);

-- 7. Drone Survey Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'drone_survey',
  'Drone Survey Assistant',
  'Specializes in aerial survey planning, photogrammetry, and 3D modeling',
  'Plane',
  'bg-purple-600',
  '["flight_planning", "photogrammetry", "orthophoto_generation", "3d_modeling", "volumetric_analysis", "progress_monitoring"]'::jsonb,
  '["flight_plan", "data_capture", "processing", "model_generation", "analysis", "reporting"]'::jsonb,
  'You are a specialized Drone Survey AI assistant expert in aerial photogrammetry and LiDAR processing. You plan flight missions, process aerial imagery, generate 3D models, and calculate volumes. Ensure GACA compliance and data accuracy.',
  '["flight_planner", "pix4d_integration", "photogrammetry_processor", "3d_modeler", "volume_calculator"]'::jsonb
);

-- 8. Maintenance Engineering Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'maintenance',
  'Maintenance Engineering Assistant',
  'Specializes in preventive maintenance, fault diagnosis, and asset management',
  'Wrench',
  'bg-orange-600',
  '["preventive_maintenance", "fault_diagnosis", "work_order_management", "spare_parts", "reliability_analysis", "condition_monitoring"]'::jsonb,
  '["inspection", "diagnosis", "maintenance_plan", "work_order", "parts_requisition", "completion_report"]'::jsonb,
  'You are a specialized Maintenance Engineering AI assistant expert in equipment reliability and preventive maintenance. You diagnose faults, plan maintenance schedules, manage work orders, and optimize asset performance. Focus on minimizing downtime and extending equipment life.',
  '["cmms_integration", "diagnostic_tools", "reliability_calculator", "parts_database", "maintenance_scheduler"]'::jsonb
);

-- 9. Geotechnical Engineering Agent
INSERT INTO public.ai_agents (
  discipline,
  display_name,
  description,
  icon_name,
  color_scheme,
  capabilities,
  workflows,
  system_prompt,
  tool_stack
) VALUES (
  'geotechnical',
  'Geotechnical Engineering Assistant',
  'Specializes in soil analysis, foundation recommendations, and slope stability',
  'Mountain',
  'bg-amber-700',
  '["soil_classification", "bearing_capacity", "settlement_analysis", "slope_stability", "foundation_recommendation", "deep_foundation_design"]'::jsonb,
  '["soil_test_analysis", "classification", "bearing_capacity_calc", "settlement_calc", "foundation_design", "report_generation"]'::jsonb,
  'You are a specialized Geotechnical Engineering AI assistant expert in Saudi soil conditions and foundation design. You analyze soil test results, calculate bearing capacity, assess settlements, and recommend foundations. Always consider local geology and groundwater conditions.',
  '["soil_classifier", "bearing_capacity_calc", "settlement_calc", "slope_stability_analyzer", "foundation_designer"]'::jsonb
);


-- =====================================================
-- RPC Functions for Agent Operations
-- =====================================================

-- Function 1: Get All Available Agents
CREATE OR REPLACE FUNCTION public.get_available_agents()
RETURNS SETOF public.ai_agents
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT * FROM public.ai_agents
  WHERE is_active = true
  ORDER BY discipline;
END;
$$;

GRANT EXECUTE ON FUNCTION public.get_available_agents() TO authenticated;


-- Function 2: Start Agent Session
CREATE OR REPLACE FUNCTION public.start_agent_session(
  p_agent_id UUID,
  p_session_type TEXT,
  p_project_id UUID DEFAULT NULL,
  p_job_id UUID DEFAULT NULL
)
RETURNS UUID
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  v_session_id UUID;
BEGIN
  IF auth.uid() IS NULL THEN
    RAISE EXCEPTION 'Not authenticated';
  END IF;

  INSERT INTO public.ai_agent_sessions (
    user_id,
    agent_id,
    session_type,
    project_id,
    job_id,
    is_active,
    started_at
  ) VALUES (
    auth.uid(),
    p_agent_id,
    p_session_type,
    p_project_id,
    p_job_id,
    true,
    NOW()
  )
  RETURNING id INTO v_session_id;

  RETURN v_session_id;
END;
$$;

GRANT EXECUTE ON FUNCTION public.start_agent_session(UUID, TEXT, UUID, UUID) TO authenticated;


-- Function 3: Submit Agent Feedback
CREATE OR REPLACE FUNCTION public.submit_agent_feedback(
  p_session_id UUID,
  p_feedback_type TEXT,
  p_rating INTEGER,
  p_comment TEXT DEFAULT NULL
)
RETURNS UUID
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  v_feedback_id UUID;
  v_agent_id UUID;
BEGIN
  IF auth.uid() IS NULL THEN
    RAISE EXCEPTION 'Not authenticated';
  END IF;

  -- Get agent_id from session
  SELECT agent_id INTO v_agent_id
  FROM public.ai_agent_sessions
  WHERE id = p_session_id AND user_id = auth.uid();

  IF v_agent_id IS NULL THEN
    RAISE EXCEPTION 'Session not found or unauthorized';
  END IF;

  INSERT INTO public.ai_agent_feedback (
    session_id,
    agent_id,
    user_id,
    feedback_type,
    rating,
    comment
  ) VALUES (
    p_session_id,
    v_agent_id,
    auth.uid(),
    p_feedback_type,
    p_rating,
    p_comment
  )
  RETURNING id INTO v_feedback_id;

  RETURN v_feedback_id;
END;
$$;

GRANT EXECUTE ON FUNCTION public.submit_agent_feedback(UUID, TEXT, INTEGER, TEXT) TO authenticated;


-- =====================================================
-- Analytics Views
-- =====================================================

-- Agent performance dashboard
CREATE OR REPLACE VIEW public.agent_performance_metrics AS
SELECT 
  a.discipline,
  a.display_name,
  COUNT(DISTINCT s.id) as total_sessions,
  COUNT(DISTINCT s.user_id) as unique_users,
  AVG(f.rating) as avg_rating,
  AVG(t.accuracy_score) as avg_accuracy,
  AVG(t.duration_ms) as avg_duration_ms,
  SUM(t.token_count) as total_tokens,
  SUM(t.cost_usd) as total_cost_usd
FROM public.ai_agents a
LEFT JOIN public.ai_agent_sessions s ON a.id = s.agent_id
LEFT JOIN public.ai_agent_feedback f ON a.id = f.agent_id
LEFT JOIN public.ai_agent_telemetry t ON a.id = t.agent_id
GROUP BY a.id, a.discipline, a.display_name;


-- =====================================================
-- Verification
-- =====================================================
-- SELECT * FROM ai_agents;
-- SELECT * FROM agent_performance_metrics;

